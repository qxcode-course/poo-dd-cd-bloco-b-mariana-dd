{
    "patches": [
        {
            "label": "2025-10-28_16-11-29",
            "content": "@@ -1,951 +0,0 @@\n-class Bateria:%0A    def __init__(self, capacidade: int):%0A        self.__capacidade = capacidade%0A        self.__carga = capacidade%0A%0A    def get_carga(self):%0A        return self.__carga%0A%0A    def get_capacide(self):%0A        return self.__capacidade%0A%0A    def descarregar(self, tempo: int):%0A        gasto = min(self.__carga, tempo)%0A        self.__carga -= gasto%0A        return gasto%0A%0A    def carregar(self, tempo: int):%0A        self.__carga = min(self.__capacidade, self.__carga + tempo)%0A%0A    def esta_vazia(self):%0A        return self.__carga == 0%0A%0A    def mostrar(self):%0A        print(f%22(%7Bself.__carga%7D/%7Bself.__capacidade%7D)%22)%0A%0A    def __str__(self):%0A        return f%22(%7Bself.__carga%7D/%7Bself.__capacidade%7D)%22%0A%0Aclass Carregador:%0A    def __init__(self, potencia: int):%0A        self.__potencia = potencia%0A%0A    def mostrar(self):%0A        print(f%22(Potencia %7Bself.__potencia%7D)%22)%0A%0A    def __str__(self):%0A        remove f%22(Potencia %7Bself.__potencia%7D)%22%0A%0Aclass Notebook:\n",
            "lines": "0"
        },
        {
            "label": "2025-10-28_16-34-29",
            "content": "@@ -948,360 +948,4 @@\n ook:\n-%0A    def __init__(self):%0A        self.__ligado = False%0A        self.__bateria = None%0A        self.__carregador = None%0A%0A    def setBateria(self):%0A        if self.__bateria is not None:%0A            print(%22bateria removida%22)%0A            b = self.__bateria = None%0A            return b%0A        print(%22fail: sem bateria para remove%22)%0A        return None%0A%0A    def\n",
            "lines": "39"
        },
        {
            "label": "2025-10-28_16-47-28",
            "content": "@@ -1304,577 +1304,4 @@\n  def\n- setCarregador(self, carregar: Carregador):%0A        if self.__ligado:%0A            print(%22notebook ja esta ligado%22)%0A            return%0A%0A        if (self.__bateria and not self.__bateria.esta_vazia()) of self.__carregador:%0A            self.__ligado: True%0A            print(%22notebook ligado%22)%0A        else:%0A            print(%22nao foi possivel ligar%22)%0A%0A    def desligar(self):%0A        if self.__ligado:%0A            self.__ligado = False%0A            print(%22notebook desligdo%22)%0A            return%0A%0A        if self.__bateria and not self.__bateria.esta_vazia():%0A%0A            desca\n",
            "lines": "53"
        },
        {
            "label": "2025-10-28_17-04-38",
            "content": "@@ -1877,1268 +1877,4 @@\n esca\n-rregado = self.__bateria.descarregar(tempo)%0A            tempo_restante = tempo - descarregado %0A%0A        if self.__carregador:%0A                self.__bateria.carregar(self.__carregador.get_potencia() * tempo)%0A%0A            if self.__bateria.esta_vazia():%0A                print(f%22Usando por %7Bdescarregado%7D minutos, notebook descarregou%22)%0A                self.__ligado = False%0A            else:%0A                print(f%22Usando por %7Btempo%7D minutos%22)%0A%0A        elif self.__bateria and self.__carregador:%0A            # estava descarregada, mas tem carregador%0A            self.__bateria.carregar(self.__carregador.get_potencia() * tempo)%0A            print(%22Notebook utilizado com sucesso%22)%0A%0A        elif self.__carregador and not self.__bateria:%0A            # sem bateria, mas ligado ao carregador%0A            print(%22Notebook utilizado com sucesso%22)%0A%0A        else:%0A            print(%22fail: sem energia%22)%0A            self.__ligado = False%0A%0A    def mostrar(self):%0A        status = %22Ligado%22 if self.__ligado else %22Desligado%22%0A        bateria_str = str(self.__bateria) if self.__bateria else %22Nenhuma%22%0A        carregador_str = str(self.__carregador) if self.__carregador else %22Desconectado%22%0A        print(f%22Status: %7Bstatus%7D, Bateria: %7Bbateria_str%7D, Carregador: %7Bcarregador_str%7D%22)\n",
            "lines": "72"
        },
        {
            "label": "2025-10-28_17-06-11",
            "content": "@@ -196,18 +196,16 @@\n _capacid\n-ad\n e(self):\n@@ -690,25 +690,24 @@\n acidade%7D)%22%0A%0A\n-%0A\n class Carreg\n@@ -791,68 +791,8 @@\n ia%0A%0A\n-    def get_potencia(self):%0A        return self.__potencia%0A%0A\n     \n@@ -826,25 +826,25 @@\n print(f%22(Pot\n-%C3%AA\n+e\n ncia %7Bself._\n@@ -895,20 +895,20 @@\n   re\n-turn\n+move\n  f%22(Pot\n-%C3%AA\n+e\n ncia\n@@ -929,17 +929,16 @@\n cia%7D)%22%0A%0A\n-%0A\n class No\n@@ -1090,85 +1090,8 @@\n self\n-, bateria: Bateria):%0A        self.__bateria = bateria%0A%0A    def rmBateria(self\n ):%0A \n@@ -1200,35 +1200,8 @@\n eria\n-%0A            self.__bateria\n  = N\n@@ -1269,17 +1269,16 @@\n a remove\n-r\n %22)%0A     \n@@ -1328,18 +1328,16 @@\n  carrega\n-do\n r: Carre\n@@ -1348,69 +1348,8 @@\n r):%0A\n-        self.__carregador = carregador%0A%0A    def ligar(self):%0A\n     \n@@ -1399,22 +1399,22 @@\n tebook j\n-%C3%A1\n+a\n  est\n-%C3%A1\n+a\n  ligado%22\n@@ -1500,17 +1500,17 @@\n zia()) o\n-r\n+f\n  self.__\n@@ -1546,18 +1546,17 @@\n __ligado\n- =\n+:\n  True%0A  \n@@ -1628,9 +1628,9 @@\n t(%22n\n-%C3%A3\n+a\n o fo\n@@ -1639,9 +1639,9 @@\n poss\n-%C3%AD\n+i\n vel \n@@ -1771,337 +1771,13 @@\n slig\n-a\n do%22)%0A\n-        else:%0A            print(%22notebook j%C3%A1 est%C3%A1 desligado%22)%0A%0A    def usar(self, tempo: int):%0A        if not self.__ligado:%0A            print(%22notebook desligado%22)%0A            return%0A%0A        if self.__bateria is None and self.__carregador is None:%0A            print(%22fail: sem energia%22)%0A            self.__ligado = False%0A\n     \n@@ -1859,33 +1859,8 @@\n ():%0A\n-            # usa bateria\n %0A   \n@@ -1970,75 +1970,11 @@\n gado\n+ \n %0A%0A\n-            # se tiver carregador, ele carrega durante o uso%0A    \n     \n@@ -3137,9 +3137,8 @@\n r_str%7D%22)\n-%0A\n",
            "lines": "101"
        },
        {
            "label": "2025-10-28_17-07-08",
            "content": "class Bateria:\n    def __init__(self, capacidade: int):\n        self.__capacidade = capacidade\n        self.__carga = capacidade\n\n    def get_carga(self):\n        return self.__carga\n\n    def get_capacidade(self):\n        return self.__capacidade\n\n    def descarregar(self, tempo: int):\n        gasto = min(self.__carga, tempo)\n        self.__carga -= gasto\n        return gasto\n\n    def carregar(self, tempo: int):\n        self.__carga = min(self.__capacidade, self.__carga + tempo)\n\n    def esta_vazia(self):\n        return self.__carga == 0\n\n    def mostrar(self):\n        print(f\"({self.__carga}/{self.__capacidade})\")\n\n    def __str__(self):\n        return f\"({self.__carga}/{self.__capacidade})\"\n\n\nclass Carregador:\n    def __init__(self, potencia: int):\n        self.__potencia = potencia\n\n    def get_potencia(self):\n        return self.__potencia\n\n    def mostrar(self):\n        print(f\"(Pot\u00eancia {self.__potencia})\")\n\n    def __str__(self):\n        return f\"(Pot\u00eancia {self.__potencia})\"\n\n\nclass Notebook:\n    def __init__(self):\n        self.__ligado = False\n        self.__bateria = None\n        self.__carregador = None\n\n    def setBateria(self, bateria: Bateria):\n        self.__bateria = bateria\n\n    def rmBateria(self):\n        if self.__bateria is not None:\n            print(\"bateria removida\")\n            b = self.__bateria\n            self.__bateria = None\n            return b\n        print(\"fail: sem bateria para remover\")\n        return None\n\n    def setCarregador(self, carregador: Carregador):\n        self.__carregador = carregador\n\n    def ligar(self):\n        if self.__ligado:\n            print(\"notebook j\u00e1 est\u00e1 ligado\")\n            return\n\n        if (self.__bateria and not self.__bateria.esta_vazia()) or self.__carregador:\n            self.__ligado = True\n            print(\"notebook ligado\")\n        else:\n            print(\"n\u00e3o foi poss\u00edvel ligar\")\n\n    def desligar(self):\n        if self.__ligado:\n            self.__ligado = False\n            print(\"notebook desligado\")\n        else:\n            print(\"notebook j\u00e1 est\u00e1 desligado\")\n\n    def usar(self, tempo: int):\n        if not self.__ligado:\n            print(\"notebook desligado\")\n            return\n\n        if self.__bateria is None and self.__carregador is None:\n            print(\"fail: sem energia\")\n            self.__ligado = False\n            return\n\n        if self.__bateria and not self.__bateria.esta_vazia():\n            # usa bateria\n            descarregado = self.__bateria.descarregar(tempo)\n            tempo_restante = tempo - descarregado\n\n            # se tiver carregador, ele carrega durante o uso\n            if self.__carregador:\n                self.__bateria.carregar(self.__carregador.get_potencia() * tempo)\n\n            if self.__bateria.esta_vazia():\n                print(f\"Usando por {descarregado} minutos, notebook descarregou\")\n                self.__ligado = False\n            else:\n                print(f\"Usando por {tempo} minutos\")\n\n        elif self.__bateria and self.__carregador:\n            # estava descarregada, mas tem carregador\n            self.__bateria.carregar(self.__carregador.get_potencia() * tempo)\n            print(\"Notebook utilizado com sucesso\")\n\n        elif self.__carregador and not self.__bateria:\n            # sem bateria, mas ligado ao carregador\n            print(\"Notebook utilizado com sucesso\")\n\n        else:\n            print(\"fail: sem energia\")\n            self.__ligado = False\n\n    def mostrar(self):\n        status = \"Ligado\" if self.__ligado else \"Desligado\"\n        bateria_str = str(self.__bateria) if self.__bateria else \"Nenhuma\"\n        carregador_str = str(self.__carregador) if self.__carregador else \"Desconectado\"\n        print(f\"Status: {status}, Bateria: {bateria_str}, Carregador: {carregador_str}\")\n",
            "lines": "125"
        }
    ]
}